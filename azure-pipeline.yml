trigger:
- main

variable:
  azureSubscription: 'azuredevops' 

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: 'DeployInfrastructure'
  jobs:
  - job: 'Deploy'
    steps:
    - checkout: self
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $env:resourceGroupName --template-file ./azure-static-website/main.bicep --parameters storageAccountName=$env:storageAccountName

- stage: 'DeployWebsite'
  jobs:
  - job: 'DeployWebsite'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage container create \
            --name $env:containerName \
            --account-name $env:storageAccountName$env:activeEnvironment \
            --fail-on-exist

          az storage blob upload --overwrite \
            --container-name $env:containerName \
            --file ./azure-static-website/website/index.html \
            --account-name $env:storageAccountName$env:activeEnvironment 


- stage: 'RunTests'
  jobs:
  - job: 'RunPesterTests'
    steps:
    - checkout: self
    - powershell: Install-Module -Name Pester -Force -SkipPublisherCheck
      displayName: 'Install Pester'
    - powershell: Install-Module -Name Az -AllowClobber -Force -SkipPublisherCheck
      displayName: 'Install Azure PowerShell Module'
    - powershell: |
        $secureSecret = ConvertTo-SecureString -String $env:SECRET -AsPlainText -Force
        $psCredential = New-Object PSCredential -ArgumentList $env:APP_ID, $secureSecret
        Connect-AzAccount -ServicePrincipal -Credential $psCredential -Tenant $env:TENANT_ID
      displayName: 'Connect to Azure Account'   
    - powershell: |
        .\infra-tests\Infrastructure.Test.ps1 -resourceGroupName $env:resourceGroupName -storageAccountName $env:storageAccountName -cdnProfileName $env:cdnProfileName
      displayName: 'Run Pester Tests'
        
    - script: echo '##vso[task.setvariable variable=activeEnvironment]green'
      displayName: 'Toggle to green'
      condition: eq(variables['activeEnvironment'], 'blue')
